package com.hust.radiofeeler.tab2;

import android.app.Activity;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;

import com.bigkoo.pickerview.TimePickerView;
import com.hust.radiofeeler.GlobalConstants.Constants;
import com.hust.radiofeeler.R;
import com.hust.radiofeeler.bean2server.HistorySpectrumRequest;
import com.hust.radiofeeler.compute.ComputePara;
import com.hust.radiofeeler.view.MyTopBar;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.chart.PointStyle;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;



/**
 * Created by Administrator on 2015/7/23.
 */

public class Chart_spectrum extends Activity {
    private final int POINT_Num=1024;//点数
    //下拉条
    private Spinner spin;
    private List<String> list;
    private ArrayAdapter<String> adapter;

    private LinearLayout layout;
    private EditText startDateTime;
    private EditText endDateTime;
    private EditText et_ID;
    private LinearLayout lilay_spectrum;
    private ComputePara computePara = new ComputePara();
    TimePickerView pvTime1, pvTime2;

    private Timer timer = new Timer();
    private TimerTask task;
    private XYSeries series;
    private XYMultipleSeriesDataset mDataset;
    private GraphicalView chart;
    private XYMultipleSeriesRenderer renderer;
    private int[] color = new int[]{Color.RED, Color.GREEN};
    private PointStyle style = PointStyle.CIRCLE;

    private int totalseries = 2;//画图线条总数
    private double startFrq = 0, endFrq = 0;

    private List<float[]> listdata=null;
    private List<float[]> backdata=null;
    private double[] xv = new double[POINT_Num];
    private double[] yv = new double[POINT_Num];
//    private double[] xv_back = new double[POINT_Num];
//    private double[] yv_back = new double[POINT_Num];

    private int band=0;

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);

            if (msg.what == 1) {
                updateChart();
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.chart_spectrum);
        initSetting();
        initspinnerSetting();
        InitEvent();
        layout = (LinearLayout) findViewById(R.id.linearLayout1);
        series = new XYSeries("");
        mDataset = buildDataset("", totalseries);
        renderer = buildRenderer(color, totalseries, style, true);
        // 设置好图表的样式
        setChartSettings(renderer, "频率值", "功率值", 95, 110, -150, 10, Color.WHITE, Color.WHITE);
        chart = ChartFactory.getLineChartView(Chart_spectrum.this, mDataset, renderer);
        layout.addView(chart, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));

        MyTopBar topBar = (MyTopBar) findViewById(R.id.topbar_chartspec);
        topBar.setOnTopBarClickListener(new MyTopBar.TopBarClickListener() {
            @Override
            public void leftclick() {
                Chart_spectrum.this.finish();
            }

            @Override
            public void rightclick() {

            }
        });
    }


    private void initSetting() {
        spin = (Spinner) findViewById(R.id.spinner_spectrum);
        lilay_spectrum = (LinearLayout) findViewById(R.id.lilay_history);
        et_ID = (EditText) findViewById(R.id.et_ID);
        // 两个输入框
        startDateTime = (EditText) findViewById(R.id.inputDate);
        endDateTime = (EditText) findViewById(R.id.inputDate2);
        //时间选择器
        pvTime1 = new TimePickerView(this, TimePickerView.Type.YEAR_MONTH_DAY_HOURS_MINS);
        pvTime2 = new TimePickerView(this, TimePickerView.Type.YEAR_MONTH_DAY_HOURS_MINS);
        pvTime1.setTime(new Date());
        pvTime1.setCyclic(false);
        pvTime1.setCancelable(true);
        //时间选择后回调
        pvTime1.setOnTimeSelectListener(new TimePickerView.OnTimeSelectListener() {

            @Override
            public void onTimeSelect(String date) {
                startDateTime.setText(date);
            }
        });
        pvTime2.setTime(new Date());
        pvTime2.setCyclic(false);
        pvTime2.setCancelable(true);
        //时间选择后回调
        pvTime2.setOnTimeSelectListener(new TimePickerView.OnTimeSelectListener() {

            @Override
            public void onTimeSelect(String date) {
                endDateTime.setText(date);
            }
        });

    }

    private void initspinnerSetting() {
        list = new ArrayList<String>();
        list.add("请选择 ");
        list.add("实时数据");
        list.add("历史数据");
        adapter = new ArrayAdapter<String>(Chart_spectrum.this, android.R.layout.simple_spinner_item, list);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spin.setAdapter(adapter);

    }

    private void InitEvent() {
        //spinner
        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (id == 2) {
                    lilay_spectrum.setVisibility(View.VISIBLE);
                    //历史数据需要设置内容
                    DateEvent();
                    HistorySpectrumRequest spec = new HistorySpectrumRequest();
                    try {
                        spec.setEqiupmentID(Constants.ID);
                        if (!et_ID.getText().toString().equals("")) {
                            spec.setIDcard(Integer.parseInt(et_ID.getText().toString()));
                        }
                        if (!startDateTime.getText().toString().equals("")) {
                            byte[] bytes = computePara.Time2Bytes(startDateTime.getText().toString());
                            spec.setStartTime(bytes);
                        }
                        if (!endDateTime.getText().toString().equals("")) {
                            byte[] bytes = computePara.Time2Bytes(endDateTime.getText().toString());
                            spec.setEndTime(bytes);
                        }
//                        BroadcastHelper.sendBroadCast(getActivity(),
//                                ConstantValues.SERVICE_SPECTRUM, "service_spectrum", spec);
                    } catch (Exception e) {

                    }
                } else if (id == 1) {
                    lilay_spectrum.setVisibility(View.GONE);
                    Constants.Queue_DrawRealtimeSpectrum.clear();
                    Constants.Queue_BackgroundSpectrum.clear();
                    int start=0;
                    int end=0;
                    if (Constants.SweepParaList.size() != 0) {
                        startFrq = (int) Constants.SweepParaList.get(0).getSegStart();
                        endFrq = (int) Constants.SweepParaList.get(Constants.SweepParaList.size() - 1).getSegEnd();
                         start=Constants.SweepParaList.get(0).getStartNum();
                         end=Constants.SweepParaList.get(Constants.SweepParaList.size() - 1).getEndNum();
                    }
                    band= Constants.drawSpectrumBands;
                    String st=null;
                    if (endFrq - startFrq <= 1000) {

                        st= "频率值"+"     "+"VBW=10*RBW  RBW=24.414KHZ";
                    }else{

                        st= "频率值"+"     "+"VBW=10*RBW  RBW=781.25KHZ";
                    }
                    setChartSettings(renderer, st, "功率值", startFrq, endFrq, -150, 10, Color.WHITE, Color.WHITE);
                    Log.d("chart","起始频率："+startFrq+"；终止频率："+endFrq);


                    task = new TimerTask() {
                        @Override
                        public void run() {
                            Message message = new Message();
                            message.what = 1;
                            handler.sendMessage(message);
                        }
                    };

                    timer.schedule(task, 1000, getFreshTime(band));
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void updateChart() {
        //背景频谱（整段画）
        try {
            if (!Constants.Queue_BackgroundSpectrum.isEmpty()) {
//                int size = Constants.Queue_BackgroundSpectrum.size();
//                Log.d("chart", "背景频谱的段数:" + size);
                backdata = Constants.Queue_BackgroundSpectrum.poll();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //避免图形缺失,背景频谱没有重传
        if(backdata!=null&&backdata.size()==band){
            for (int mj = 0; mj <band; mj++) {
                float[] data = backdata.get(mj);
                int total = (int) data[0];
                int circle = POINT_Num / total;
                double dataX=0;
                dataX = (data[1] - 1) * 25 + 70;

                int flag = 0;
                //抽取
                for (int i = 0; i < circle; i++) {
                    float max = data[i * total + 2];
                    for (int j = 0; j < total; j++) {
                        if (data[j + i * total + 2] >= max) {
                            max = data[j + i * total + 2];
                            flag = j + i * total + 2;
                        }
                    }
                    if (endFrq - startFrq <= 1000) {
                        //细扫频
                        xv[i + mj * circle] = dataX + flag * 25.0 / POINT_Num;
                    } else {
                        //粗扫频
                        xv[i + mj * circle] = dataX + flag * 800 / POINT_Num;
                    }
                    yv[i + mj * circle] = max;
                }
            }
            series = mDataset.getSeriesAt(0);
            mDataset.removeSeries(0);
            series.clear();
            for (int k = 0; k < POINT_Num; k++) {
                series.add(xv[k], yv[k]);
            }
            // 在数据集中添加新的点集
            mDataset.addSeries(0, series);
            chart.postInvalidate();
        }

        //实时频谱（整段画）

        try {
            if (!Constants.Queue_DrawRealtimeSpectrum.isEmpty()) {
//                int size=Constants.Queue_DrawRealtimeSpectrum.size();
//                Log.d("chart","实时频谱的段数:"+size);
                listdata = Constants.Queue_DrawRealtimeSpectrum.poll();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if(listdata==null)
            return;

        if(listdata.size()==band){

            for (int mj = 0; mj < band; mj++) {
                float[] data = listdata.get(mj);
                int total = (int) data[0];
                int circle = POINT_Num / total;
                double dataX=0;
                if((startFrq-70)%25==0){
                    dataX=startFrq;
                }else {
                    dataX = (data[1] - 1) * 25 + 70;
                }
                int flag = 0;
                //抽取
                for (int i = 0; i < circle; i++) {
                    float max = data[i * total + 2];
                    for (int j = 0; j < total; j++) {
                        if (data[j + i * total + 2] >= max) {
                            max = data[j + i * total + 2];
                            flag = j + i * total + 2;
                        }
                    }
                    if (endFrq - startFrq <= 1000) {
                        //细扫频
                        xv[i + mj * circle] = dataX + flag * 25.0 / POINT_Num;
                    } else {
                        //粗扫频
                        xv[i + mj * circle] = dataX + flag * 800 / POINT_Num;
                    }
                    yv[i + mj * circle] = max;
                }
            }
            //加上背景频谱;最后一条是实时频谱
            series = mDataset.getSeriesAt(1);
            mDataset.removeSeries(1);
            // 点集先清空，为了做成新的点集而准备
            series.clear();
            for (int k = 0; k < POINT_Num; k++) {
                series.add(xv[k], yv[k]);
            }
            // 在数据集中添加新的点集
            mDataset.addSeries(1, series);
            chart.postInvalidate();
        }
    }

    private void DateEvent() {

        //弹出时间选择器
        startDateTime.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                pvTime1.show();
            }
        });
        endDateTime.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                pvTime2.show();
            }
        });
    }


    @Override
    public void onDestroy() {
        // 当结束程序时关掉Timer
        timer.cancel();
        super.onDestroy();
    }

    private void InitView(int start, int end) {
        layout.removeAllViews();
        series = new XYSeries("");
        mDataset = buildDataset("", 2);
        renderer = buildRenderer(color, 2, style, true);
        setChartSettings(renderer, "频率值", "功率值", start, end, -150, 10, Color.WHITE, Color.WHITE);
        chart = ChartFactory.getLineChartView(Chart_spectrum.this, mDataset, renderer);
        layout.addView(chart, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));

    }

    protected XYMultipleSeriesDataset buildDataset(String titles, int mtotalseries) {
        XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
        for (int i = 0; i < mtotalseries; i++) {
            XYSeries series = new XYSeries(titles);    //根据每条线的名称创建
            dataset.addSeries(series);
        }
        return dataset;
    }


    protected XYMultipleSeriesRenderer buildRenderer(int[] color, int totalseries,
                                                     PointStyle style, boolean fill) {
        XYMultipleSeriesRenderer renderer = new XYMultipleSeriesRenderer();
        // 设置图表中曲线本身的样式，包括颜色、点的大小以及线的粗细等
        for (int i = 0; i < totalseries - 1; i++) {
            XYSeriesRenderer rBack = new XYSeriesRenderer();
            rBack.setColor(color[0]);
            rBack.setPointStyle(style);
            rBack.setFillPoints(fill);
            rBack.setLineWidth(5);
            renderer.addSeriesRenderer(rBack);
        }
        //实时频谱
        XYSeriesRenderer r = new XYSeriesRenderer();
        r.setColor(color[1]);
        r.setPointStyle(style);
        r.setFillPoints(fill);
        r.setLineWidth(5);
        renderer.addSeriesRenderer(r);

        return renderer;
    }

    protected void setChartSettings(XYMultipleSeriesRenderer renderer,
                                    String xTitle, String yTitle, double xMin, double xMax,
                                    double yMin, double yMax, int axesColor, int labelsColor) {
        // 有关对图表的渲染可参看api文档
        renderer.setChartTitle("频谱图");//
        renderer.setXTitle(xTitle);
        renderer.setYTitle(yTitle);
        renderer.setAxisTitleTextSize(30);
        renderer.setChartTitleTextSize(30);
        renderer.setXAxisMin(xMin);
        renderer.setXAxisMax(xMax);
        renderer.setYAxisMin(yMin);
        renderer.setYAxisMax(yMax);
        renderer.setAxesColor(axesColor);
        renderer.setLabelsColor(labelsColor);
        renderer.setLabelsTextSize(30);
        renderer.setShowGrid(true);
        renderer.setGridColor(Color.GREEN);
        renderer.setXLabels(10);
        renderer.setYLabels(10);
        renderer.setYLabelsAlign(Paint.Align.RIGHT);
        renderer.setPointSize((float) 2);
        renderer.setShowLegend(false);
        renderer.setZoomEnabled(true);// 设置渲染器允许放大缩小
        renderer.setZoomButtonsVisible(true);
        /**以下为自己修改
         *
         */
        //设定背景颜色
        renderer.setApplyBackgroundColor(true);
        renderer.setBackgroundColor(Color.BLACK);

    }

    public static String getTime(Date date) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy年MM月dd日 HH:mm");
        return format.format(date);
    }


    private  int  getFreshTime(int band){
        if(band<5){
            return 500;
        }else if(band>=5&&band<10){
            return 1000;
        }else if(band>=10&&band<20){
            return 2000;
        }else if(band>=20&&band<30){
            return 3000;
        }else if(band>=30&&band<=400){
            return 4000;
        }
        return 0;
    }

}

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        



















































































































































































































































































